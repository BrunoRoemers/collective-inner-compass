// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // NOTE: using SQLite for development and e.g. cockroachdb for production is
  //       not officially supported, see: https://github.com/prisma/prisma/issues/3834
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid()) @db.Uuid
  name      String?
  email     String      @unique
  answers   Answer[]
  AuthToken AuthToken[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model AuthToken {
  id            String    @id @default(uuid()) @db.Uuid
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.Uuid
  hash          String // store the hash of the token (the actual token is sent to the user over email and discarded immediately)
  invalidatedAt DateTime? // value set implies that the token cannot be used anymore
  createdAt     DateTime  @default(now()) // used to calculate token expiry (i.e. should be used within next 5 minutes)
  updatedAt     DateTime  @updatedAt
}

model Questionnaire {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  fields    Field[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Field {
  id              String        @id @default(uuid()) @db.Uuid
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  questionnaireId String        @db.Uuid
  type            FieldType
  params          Json
  answers         Answer[]
  order           Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([questionnaireId, order])
}

enum FieldType {
  NUMBER
  TEXT
  EXPLAINER
}

model Answer {
  field     Field    @relation(fields: [fieldId], references: id)
  fieldId   String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, fieldId])
}
